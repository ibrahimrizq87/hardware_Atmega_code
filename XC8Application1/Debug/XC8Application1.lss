
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000018d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000752  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fd  00000000  00000000  0000090d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000210  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000005a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000e6  000000e6  0000015a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000e8  000000e8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#include <avr/io.h>

int main(void)
{
	int counter=20;
	DDRA |= 0xFF;
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00; //Makes all pins of PORTD input
  72:	11 ba       	out	0x11, r1	; 17
#include <avr/io.h>

int main(void)
{
	int counter=20;
  74:	24 e1       	ldi	r18, 0x14	; 20
  76:	30 e0       	ldi	r19, 0x00	; 0
//	PORTC = 0xFC;
	while (1){
	
			
		
		PORTA |= (0 << PA4);   /* turn movement motors on */
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (1 << PA3);
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (0 << PA2);
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (1 << PA1);
  86:	8b b3       	in	r24, 0x1b	; 27
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	8b bb       	out	0x1b, r24	; 27


		PORTA |= (1 << PA5);   /* turn on the water pump */
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	8b bb       	out	0x1b, r24	; 27


		PORTA |= (1 << PA6);   /* turn on the brush motor */
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bb       	out	0x1b, r24	; 27
		
		
		if ((PINC & (1 << PC5)) ==1 ){   /* press on stop button */
  98:	83 b3       	in	r24, 0x13	; 19

			PORTA |= (0 << PA6);   /* turn on the brush motor */
			
		}
		
		if (counter < 1){  /* reach the end of the solar panels array */
  9a:	12 16       	cp	r1, r18
  9c:	13 06       	cpc	r1, r19
  9e:	6c f0       	brlt	.+26     	; 0xba <main+0x4e>
			PORTA |= (0 << PA1);   /* stop all movement motors */
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (0 << PA2);
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (0 << PA3);
  a8:	8b b3       	in	r24, 0x1b	; 27
  aa:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (0 << PA4);
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	8b bb       	out	0x1b, r24	; 27
			
			PORTA |= (0 << PA5);   /* turn off the water pump */
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	8b bb       	out	0x1b, r24	; 27


			PORTA |= (0 << PA6);   /* turn off the brush motor */
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	01 c0       	rjmp	.+2      	; 0xbc <main+0x50>
			
			}else{
			
			if (PINC & (0 << PC4)){   /* press turn on button */
  ba:	83 b3       	in	r24, 0x13	; 19

				PORTA |= (1 << PA6);   /* turn on the brush motor */
				
			}
		}
		if (PINC & (1 << PC7)){   /* calculate the number of the panel the robot is cleaning */
  bc:	9f 9b       	sbis	0x13, 7	; 19
  be:	dc cf       	rjmp	.-72     	; 0x78 <main+0xc>
			counter --;
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	31 09       	sbc	r19, r1
  c4:	d9 cf       	rjmp	.-78     	; 0x78 <main+0xc>

Disassembly of section .text.__dummy_fini:

000000e4 <_fini>:
  e4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000e6 <__funcs_on_exit>:
  e6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000e8 <__simulator_exit>:
  e8:	08 95       	ret

Disassembly of section .text.exit:

000000c6 <exit>:
  c6:	ec 01       	movw	r28, r24
  c8:	0e 94 73 00 	call	0xe6	; 0xe6 <__funcs_on_exit>
  cc:	0e 94 72 00 	call	0xe4	; 0xe4 <_fini>
  d0:	ce 01       	movw	r24, r28
  d2:	0e 94 74 00 	call	0xe8	; 0xe8 <__simulator_exit>
  d6:	ce 01       	movw	r24, r28
  d8:	0e 94 70 00 	call	0xe0	; 0xe0 <_Exit>

Disassembly of section .text._Exit:

000000e0 <_Exit>:
  e0:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
